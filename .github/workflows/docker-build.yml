name: Build and Push Docker Image

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions: write-all

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: us-central1
  REPOSITORY: flask-app
  IMAGE: flask-app
  INSTANCE_NAME: flask-app-instance
  ZONE: us-central1-a

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        poetry --version

    - name: Install dependencies
      run: poetry install --no-root

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
        install_components: 'gke-gcloud-auth-plugin'

    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        token_format: 'access_token'
        create_credentials_file: true

    - name: Debug Authentication
      run: |
        echo "Checking authentication status..."
        gcloud auth list
        gcloud config get-value project
        echo "Checking Artifact Registry access..."
        gcloud artifacts repositories list --location=${{ env.GAR_LOCATION }}

    - name: Configure Docker authentication
      run: |
        gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev --quiet

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Output Image URL
      run: |
        echo "Image URL: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }}"

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
        install_components: 'gke-gcloud-auth-plugin'

    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        token_format: 'access_token'
        create_credentials_file: true

    - name: Create Compute Engine instance if not exists
      run: |
        if ! gcloud compute instances describe ${{ env.INSTANCE_NAME }} --zone=${{ env.ZONE }} &>/dev/null; then
          gcloud compute instances create ${{ env.INSTANCE_NAME }} \
            --zone=${{ env.ZONE }} \
            --machine-type=e2-micro \
            --image-family=ubuntu-2004-lts \
            --image-project=ubuntu-os-cloud \
            --tags=http-server
        fi

    - name: Create firewall rule if not exists
      run: |
        if ! gcloud compute firewall-rules describe allow-flask &>/dev/null; then
          gcloud compute firewall-rules create allow-flask \
            --allow tcp:8080 \
            --target-tags=http-server \
            --description="Allow Flask traffic"
        fi

    - name: Setup Docker on instance
      run: |
        gcloud compute ssh ${{ env.INSTANCE_NAME }} --zone=${{ env.ZONE }} --command="
          if ! command -v docker &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y docker.io
            sudo systemctl enable docker
            sudo systemctl start docker
            sudo usermod -aG docker $USER
          fi
          gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev
        "

    - name: Deploy container
      run: |
        gcloud compute ssh ${{ env.INSTANCE_NAME }} --zone=${{ env.ZONE }} --command="
          docker stop flask-app || true
          docker rm flask-app || true
          docker run -d \
            --name flask-app \
            -p 8080:8080 \
            --restart unless-stopped \
            ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }}
        "

    - name: Get instance IP
      run: |
        INSTANCE_IP=$(gcloud compute instances describe ${{ env.INSTANCE_NAME }} \
          --zone=${{ env.ZONE }} \
          --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
        echo "Application is available at: http://$INSTANCE_IP:8080"